"""
{{api_name}} Python SDK Client
Generated by client-sdk-generator

{{#if description}}{{description}}{{/if}}
"""

import json
from typing import Dict, List, Optional, Any
{{#if async_support}}import aiohttp{{/if}}
{{#unless async_support}}import requests{{/unless}}
{{#if retry}}from tenacity import retry, stop_after_attempt, wait_exponential{{/if}}


class {{class_name}}:
    """
    Python SDK for {{api_name}}
    {{#if description}}
    {{description}}
    {{/if}}
    """
    
    def __init__(self, base_url: str{{#if authentication}}, api_key: str = None{{/if}}):
        self.base_url = base_url.rstrip('/')
        {{#if authentication}}
        self.api_key = api_key
        {{/if}}
        {{#unless async_support}}
        self.session = requests.Session()
        {{/unless}}
        {{#if async_support}}
        self._session = None
        {{/if}}
    
    {{#if async_support}}
    async def __aenter__(self):
        self._session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self._session:
            await self._session.close()
    {{/if}}
    
    {{#each operations}}
    {{#if retry}}@retry(stop=stop_after_attempt(3), wait=wait_exponential(multiplier=1, min=4, max=10)){{/if}}
    {{#if ../async_support}}async {{/if}}def {{snake_case name}}(self{{#each parameters}}, {{snake_case name}}: {{python_type type}}{{#unless required}} = None{{/unless}}{{/each}}) -> {{python_type response_type}}:
        """
        {{#if description}}{{description}}{{/if}}
        {{#if parameters}}
        
        Args:
        {{#each parameters}}
            {{snake_case name}} ({{python_type type}}): {{#if description}}{{description}}{{else}}{{name}} parameter{{/if}}
        {{/each}}
        {{/if}}
        """
        url = f"{self.base_url}{{path}}"
        {{#each parameters}}
        {{#if (eq location "path")}}
        url = url.replace("{" + "{{name}}" + "}", str({{snake_case name}}))
        {{/if}}
        {{/each}}
        
        {{#if (has_query_params parameters)}}
        params = {}
        {{#each parameters}}
        {{#if (eq location "query")}}
        if {{snake_case name}} is not None:
            params["{{name}}"] = {{snake_case name}}
        {{/if}}
        {{/each}}
        {{/if}}
        
        {{#if authentication}}
        headers = {"Authorization": f"Bearer {self.api_key}"}
        {{else}}
        headers = {}
        {{/if}}
        
        {{#if async_support}}
        async with self._session.{{lowercase method}}(url{{#if (has_query_params parameters)}}, params=params{{/if}}, headers=headers) as response:
            response.raise_for_status()
            {{#if (eq response_type "void")}}
            return None
            {{else}}
            return await response.json()
            {{/if}}
        {{else}}
        response = self.session.{{lowercase method}}(url{{#if (has_query_params parameters)}}, params=params{{/if}}, headers=headers)
        response.raise_for_status()
        {{#if (eq response_type "void")}}
        return None
        {{else}}
        return response.json()
        {{/if}}
        {{/if}}
    
    {{/each}}