/**
 * Pet Store API TypeScript SDK Configuration
 * Generated by client-sdk-generator
 */


/**
 * Retry configuration options
 */
export interface RetryConfig {
  /** Maximum number of retry attempts */
  maxRetries: number;
  /** Base delay between retries in milliseconds */
  baseDelay: number;
  /** Maximum delay between retries in milliseconds */
  maxDelay: number;
  /** Exponential backoff multiplier */
  backoffMultiplier: number;
  /** HTTP status codes that should trigger a retry */
  retryableCodes: number[];
}


/**
 * Telemetry configuration options
 */
export interface TelemetryConfig {
  /** Enable or disable telemetry */
  enabled: boolean;
  /** Endpoint for sending metrics */
  metricsEndpoint?: string;
  /** Service name for telemetry */
  serviceName: string;
}

/**
 * Client configuration options for Pet Store API REST API
 */
export interface ClientConfig {
  /** Base URL for the API */
  baseURL: string;
  
  /** Request timeout in milliseconds */
  timeout?: number;
  
  /** Default headers to include with every request */
  defaultHeaders?: Record<string, string>;
  
  /** User agent string */
  userAgent?: string;
  
  
  /** Retry configuration */
  retry?: RetryConfig;
  
  
  /** Telemetry configuration */
  telemetry?: TelemetryConfig;
  
  /** Custom fetch implementation (defaults to global fetch) */
  fetch?: typeof fetch;
  
  /** Enable debug logging */
  debug?: boolean;
}

/**
 * Default configuration values
 */
export const DEFAULT_CONFIG: Partial<ClientConfig> = {
  timeout: 30000, // 30 seconds
  userAgent: 'com.example.client-client/1.0.0',
  retry: {
    maxRetries: 3,
    baseDelay: 1000,
    maxDelay: 10000,
    backoffMultiplier: 2,
    retryableCodes: [408, 429, 500, 502, 503, 504],
  },
  telemetry: {
    enabled: true,
    serviceName: 'com.example.client-client',
  },
  debug: false,
};

/**
 * Merge user configuration with defaults
 */
export function createConfig(userConfig: ClientConfig): Required<ClientConfig> {
  return {
    ...DEFAULT_CONFIG,
    ...userConfig,
    defaultHeaders: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      ...DEFAULT_CONFIG.defaultHeaders,
      ...userConfig.defaultHeaders,
    },
    retry: userConfig.retry ? { ...DEFAULT_CONFIG.retry, ...userConfig.retry } : DEFAULT_CONFIG.retry!,
    telemetry: userConfig.telemetry ? { ...DEFAULT_CONFIG.telemetry, ...userConfig.telemetry } : DEFAULT_CONFIG.telemetry!,
    fetch: userConfig.fetch || (typeof window !== 'undefined' ? window.fetch : require('node-fetch')),
  } as Required<ClientConfig>;
}