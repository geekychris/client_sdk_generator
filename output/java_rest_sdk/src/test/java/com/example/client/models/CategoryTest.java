package com.example.client.models;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.BeforeEach;

import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Unit tests for Category model
 * Generated by SDK Generator
 */
@DisplayName("Category Model Tests")
public class CategoryTest {
    
    private ObjectMapper objectMapper;
    private Category model;
    
    @BeforeEach
    void setUp() {
        objectMapper = new ObjectMapper();
        model = new Category();
    }
    
    @Test
    @DisplayName("Should set and get id")
    void testIdGetterSetter() {
        // Given
        Long expectedValue = 123L;
        
        // When
        model.setId(expectedValue);
        Long actualValue = model.getId();
        
        // Then
        assertEquals(expectedValue, actualValue);
    }
    
    @Test
    @DisplayName("Should support fluent id setting")
    void testIdFluentSetter() {
        // Given
        Long value = 123L;
        
        // When
        Category result = model.withId(value);
        
        // Then
        assertSame(model, result);
        assertEquals(value, model.getId());
    }
    
    @Test
    @DisplayName("Should set and get name")
    void testNameGetterSetter() {
        // Given
        String expectedValue = "test_value";
        
        // When
        model.setName(expectedValue);
        String actualValue = model.getName();
        
        // Then
        assertEquals(expectedValue, actualValue);
    }
    
    @Test
    @DisplayName("Should support fluent name setting")
    void testNameFluentSetter() {
        // Given
        String value = "test_value";
        
        // When
        Category result = model.withName(value);
        
        // Then
        assertSame(model, result);
        assertEquals(value, model.getName());
    }
    
    @Test
    @DisplayName("Should serialize to JSON")
    void testSerialization() throws Exception {
        // Given
        Category model = new Category();
        // TODO: Set test data
        
        // When
        String json = objectMapper.writeValueAsString(model);
        
        // Then
        assertNotNull(json);
        assertFalse(json.isEmpty());
    }
    
    @Test
    @DisplayName("Should deserialize from JSON")
    void testDeserialization() throws Exception {
        // Given
        String json = "{}"; // TODO: Add valid JSON
        
        // When
        Category result = objectMapper.readValue(json, Category.class);
        
        // Then
        assertNotNull(result);
    }
    
    @Test
    @DisplayName("Should handle round-trip serialization")
    void testRoundTripSerialization() throws Exception {
        // Given
        Category original = new Category();
        // TODO: Set test data
        
        // When
        String json = objectMapper.writeValueAsString(original);
        Category deserialized = objectMapper.readValue(json, Category.class);
        
        // Then
        assertEquals(original, deserialized);
    }
    
    @Test
    @DisplayName("Should implement equals correctly")
    void testEquals() {
        // Given
        Category model1 = new Category();
        Category model2 = new Category();
        Category model3 = new Category();
        
        // TODO: Set same data for model1 and model2
        // TODO: Set different data for model3
        
        // When/Then
        assertEquals(model1, model2);
        assertNotEquals(model1, model3);
        assertEquals(model1, model1);
        assertNotEquals(model1, null);
        assertNotEquals(model1, "different type");
    }
    
    @Test
    @DisplayName("Should implement hashCode correctly")
    void testHashCode() {
        // Given
        Category model1 = new Category();
        Category model2 = new Category();
        
        // TODO: Set same data for both models
        
        // When/Then
        assertEquals(model1.hashCode(), model2.hashCode());
    }
    
    @Test
    @DisplayName("Should implement toString correctly")
    void testToString() {
        // Given
        Category model = new Category();
        
        // When
        String result = model.toString();
        
        // Then
        assertNotNull(result);
        assertTrue(result.contains("Category"));
    }
    
}
