/**
 * {{api_name}} TypeScript SDK Types
 * Generated by client-sdk-generator
 * 
 * {{#if description}}{{description}}{{/if}}
 */

{{#each types}}
/**
 * {{#if description}}{{description}}{{else}}{{name}} type definition{{/if}}
 */
export interface {{name}} {
  {{#each properties}}
  /**
   * {{#if description}}{{description}}{{else}}{{name}} property{{/if}}
   */
  {{camel_name}}{{optional_marker}}: {{ts_type}};
  {{/each}}
}

{{/each}}

/**
 * API Error response structure
 */
export interface APIError {
  status: number;
  message: string;
  code?: string;
  details?: string;
}

/**
 * Custom error class for API errors
 */
export class APIClientError extends Error {
  public readonly status: number;
  public readonly code?: string;
  public readonly details?: string;

  constructor(error: APIError) {
    super(error.message);
    this.name = 'APIClientError';
    this.status = error.status;
    this.code = error.code;
    this.details = error.details;
  }

  /**
   * Check if the error is retryable based on status code
   */
  isRetryable(): boolean {
    return this.status >= 500 || this.status === 429 || this.status === 408;
  }
}

/**
 * HTTP method types
 */
export type HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH' | 'HEAD' | 'OPTIONS';

/**
 * Request configuration options
 */
export interface RequestOptions {
  method: HttpMethod;
  path: string;
  params?: Record<string, any>;
  body?: any;
  headers?: Record<string, string>;
}

/**
 * Pagination metadata (if supported by API)
 */
export interface PaginationMeta {
  page?: number;
  limit?: number;
  total?: number;
  hasNext?: boolean;
  hasPrev?: boolean;
}

/**
 * Paginated response wrapper
 */
export interface PaginatedResponse<T> {
  data: T[];
  meta: PaginationMeta;
}