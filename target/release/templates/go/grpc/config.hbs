package {{package_name}}

import (
	"time"
)

// ClientConfig holds the configuration for the {{api_name}} gRPC client
type ClientConfig struct {
	// BaseURL is the gRPC server address (e.g., "localhost:50051")
	BaseURL string
	
	// UseTLS determines whether to use TLS for the connection
	UseTLS bool
	
	// TLSServerName is the server name for TLS verification
	TLSServerName string
	
	// Timeout for gRPC requests
	Timeout time.Duration
	
	// UserAgent for gRPC requests
	UserAgent string
	
	{{#if authentication}}
	// Authentication settings
	{{#if supports_api_key}}
	APIKey string
	{{/if}}
	{{#if supports_bearer_auth}}
	BearerToken string
	{{/if}}
	{{/if}}
	
	{{#if features.retry}}
	// Retry settings
	MaxRetries int
	RetryDelay time.Duration
	{{/if}}
	
	{{#if features.caching}}
	// Cache settings
	CacheEnabled bool
	CacheTTL     time.Duration
	CacheSize    int
	{{/if}}
	
	{{#if features.telemetry}}
	// Telemetry settings
	TelemetryEnabled bool
	MetricsEndpoint  string
	{{/if}}
	
	// gRPC-specific settings
	MaxReceiveMessageSize int
	MaxSendMessageSize    int
	KeepAliveTime         time.Duration
	KeepAliveTimeout      time.Duration
	PermitWithoutStream   bool
}

// NewClientConfig creates a new ClientConfig with default values for gRPC
func NewClientConfig(baseURL string) *ClientConfig {
	return &ClientConfig{
		BaseURL:   baseURL,
		UseTLS:    false,
		Timeout:   30 * time.Second,
		UserAgent: "{{package_name}}-grpc-client/{{version}}",
		{{#if features.retry}}
		MaxRetries: 3,
		RetryDelay: time.Second,
		{{/if}}
		{{#if features.caching}}
		CacheEnabled: false,
		CacheTTL:     5 * time.Minute,
		CacheSize:    1000,
		{{/if}}
		{{#if features.telemetry}}
		TelemetryEnabled: true,
		{{/if}}
		MaxReceiveMessageSize: 4 * 1024 * 1024, // 4MB
		MaxSendMessageSize:    4 * 1024 * 1024, // 4MB
		KeepAliveTime:         30 * time.Second,
		KeepAliveTimeout:      5 * time.Second,
		PermitWithoutStream:   true,
	}
}

// WithTLS enables TLS for the gRPC connection
func (c *ClientConfig) WithTLS(serverName string) *ClientConfig {
	c.UseTLS = true
	c.TLSServerName = serverName
	return c
}

{{#if authentication}}
{{#if supports_api_key}}
// WithAPIKey sets the API key for authentication
func (c *ClientConfig) WithAPIKey(apiKey string) *ClientConfig {
	c.APIKey = apiKey
	return c
}
{{/if}}

{{#if supports_bearer_auth}}
// WithBearerToken sets the bearer token for authentication
func (c *ClientConfig) WithBearerToken(token string) *ClientConfig {
	c.BearerToken = token
	return c
}
{{/if}}
{{/if}}

// WithTimeout sets the gRPC timeout
func (c *ClientConfig) WithTimeout(timeout time.Duration) *ClientConfig {
	c.Timeout = timeout
	return c
}

// WithUserAgent sets the user agent string
func (c *ClientConfig) WithUserAgent(userAgent string) *ClientConfig {
	c.UserAgent = userAgent
	return c
}

// WithMessageSize sets the maximum message sizes
func (c *ClientConfig) WithMessageSize(maxReceive, maxSend int) *ClientConfig {
	c.MaxReceiveMessageSize = maxReceive
	c.MaxSendMessageSize = maxSend
	return c
}

// WithKeepAlive configures keep-alive settings
func (c *ClientConfig) WithKeepAlive(time, timeout time.Duration, permitWithoutStream bool) *ClientConfig {
	c.KeepAliveTime = time
	c.KeepAliveTimeout = timeout
	c.PermitWithoutStream = permitWithoutStream
	return c
}

{{#if features.retry}}
// WithRetry configures retry settings
func (c *ClientConfig) WithRetry(maxRetries int, delay time.Duration) *ClientConfig {
	c.MaxRetries = maxRetries
	c.RetryDelay = delay
	return c
}
{{/if}}

{{#if features.caching}}
// WithCache configures caching settings
func (c *ClientConfig) WithCache(enabled bool, ttl time.Duration, size int) *ClientConfig {
	c.CacheEnabled = enabled
	c.CacheTTL = ttl
	c.CacheSize = size
	return c
}
{{/if}}

{{#if features.telemetry}}
// WithTelemetry configures telemetry settings
func (c *ClientConfig) WithTelemetry(enabled bool, endpoint string) *ClientConfig {
	c.TelemetryEnabled = enabled
	c.MetricsEndpoint = endpoint
	return c
}
{{/if}}