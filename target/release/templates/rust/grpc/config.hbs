//! Configuration for the {{spec.name}} gRPC client
//! 
//! This module provides configuration structures and defaults
//! for the generated gRPC SDK.

use serde::{Deserialize, Serialize};
use std::time::Duration;

/// Client configuration for the {{spec.name}} gRPC client
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct ClientConfig {
    /// gRPC server URL (e.g., "http://localhost:50051" or "grpc://example.com:443")
    pub base_url: String,
    
    /// Whether to use TLS for the connection
    pub use_tls: bool,
    
    /// TLS domain name (required if use_tls is true)
    pub tls_domain: Option<String>,
    
    /// Connection timeout in seconds
    pub timeout_seconds: u64,
    
    /// Request timeout in seconds
    pub request_timeout_seconds: u64,
    
    /// Connection keep-alive settings
    pub keep_alive_interval: Option<Duration>,
    pub keep_alive_timeout: Option<Duration>,
    
    {{#if authentication}}
    /// Authentication configuration
    pub authentication: Option<AuthenticationConfig>,
    {{/if}}
    
    {{#if features.retry}}
    /// Retry configuration
    pub retry_config: Option<RetryConfig>,
    {{/if}}
    
    {{#if features.telemetry}}
    /// Telemetry configuration
    pub telemetry_config: Option<TelemetryConfig>,
    {{/if}}
    
    {{#if features.caching}}
    /// Caching configuration
    pub cache_config: Option<CacheConfig>,
    {{/if}}
}

{{#if authentication}}
/// Authentication configuration for gRPC
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AuthenticationConfig {
    pub auth_type: AuthType,
    pub credentials: AuthCredentials,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum AuthType {
    None,
    Bearer,
    BasicAuth,
    ApiKey,
    Custom(String),
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AuthCredentials {
    pub token: Option<String>,
    pub username: Option<String>,
    pub password: Option<String>,
    pub api_key: Option<String>,
    pub custom_headers: std::collections::HashMap<String, String>,
}
{{/if}}

{{#if features.retry}}
/// Retry configuration for gRPC calls
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RetryConfig {
    pub max_attempts: u32,
    pub initial_backoff: Duration,
    pub max_backoff: Duration,
    pub backoff_multiplier: f64,
    pub retry_codes: Vec<tonic::Code>,
}
{{/if}}

{{#if features.telemetry}}
/// Telemetry configuration
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct TelemetryConfig {
    pub enabled: bool,
    pub service_name: String,
    pub service_version: String,
}
{{/if}}

{{#if features.caching}}
/// Cache configuration
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CacheConfig {
    pub enabled: bool,
    pub max_entries: usize,
    pub ttl_seconds: u64,
}
{{/if}}

impl Default for ClientConfig {
    fn default() -> Self {
        Self {
            base_url: "http://localhost:50051".to_string(),
            use_tls: false,
            tls_domain: None,
            timeout_seconds: 30,
            request_timeout_seconds: 10,
            keep_alive_interval: Some(Duration::from_secs(30)),
            keep_alive_timeout: Some(Duration::from_secs(5)),
            {{#if authentication}}
            authentication: None,
            {{/if}}
            {{#if features.retry}}
            retry_config: Some(RetryConfig::default()),
            {{/if}}
            {{#if features.telemetry}}
            telemetry_config: Some(TelemetryConfig::default()),
            {{/if}}
            {{#if features.caching}}
            cache_config: Some(CacheConfig::default()),
            {{/if}}
        }
    }
}

{{#if features.retry}}
impl Default for RetryConfig {
    fn default() -> Self {
        Self {
            max_attempts: 3,
            initial_backoff: Duration::from_millis(100),
            max_backoff: Duration::from_secs(5),
            backoff_multiplier: 2.0,
            retry_codes: vec![
                tonic::Code::Unavailable,
                tonic::Code::DeadlineExceeded,
                tonic::Code::ResourceExhausted,
            ],
        }
    }
}
{{/if}}

{{#if features.telemetry}}
impl Default for TelemetryConfig {
    fn default() -> Self {
        Self {
            enabled: true,
            service_name: "{{package}}-grpc-client".to_string(),
            service_version: "{{version}}".to_string(),
        }
    }
}
{{/if}}

{{#if features.caching}}
impl Default for CacheConfig {
    fn default() -> Self {
        Self {
            enabled: false,
            max_entries: 1000,
            ttl_seconds: 300, // 5 minutes
        }
    }
}
{{/if}}

impl ClientConfig {
    /// Create a new config with the given server URL
    pub fn new<S: Into<String>>(base_url: S) -> Self {
        Self {
            base_url: base_url.into(),
            ..Default::default()
        }
    }
    
    /// Enable TLS with the given domain name
    pub fn with_tls<S: Into<String>>(mut self, domain: S) -> Self {
        self.use_tls = true;
        self.tls_domain = Some(domain.into());
        self
    }
    
    /// Set timeout values
    pub fn with_timeouts(mut self, connect_timeout: u64, request_timeout: u64) -> Self {
        self.timeout_seconds = connect_timeout;
        self.request_timeout_seconds = request_timeout;
        self
    }
}