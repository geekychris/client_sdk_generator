"""
{{type.description}}
{{#if type.deprecated}}

.. deprecated:: This type is deprecated
{{/if}}
"""

from dataclasses import dataclass, field
from typing import Optional, List, Dict, Any, Union
from datetime import datetime, date
{{#each type.properties}}
{{!-- TODO: Add proper import generation for Object types --}}
{{/each}}


@dataclass
class {{class_name type.name}}:
    """{{type.description}}
    {{#if type.deprecated}}
    
    .. deprecated:: This type is deprecated
    {{/if}}
    
    This is a GraphQL type.
    """
    
    {{#each type.properties}}
    {{snake_case name}}: {{#if required}}{{type_mapping data_type}}{{else}}Optional[{{type_mapping data_type}}] = None{{/if}}{{#if description}}  # {{description}}{{/if}}
    {{/each}}
    
    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> '{{class_name type.name}}':
        """Create an instance from a dictionary (typically from GraphQL response)."""
        return cls(
            {{#each type.properties}}
            {{snake_case name}}=data.get('{{name}}'){{#unless @last}},{{/unless}}
            {{/each}}
        )
    
    def to_dict(self) -> Dict[str, Any]:
        """Convert to a dictionary (for GraphQL variables)."""
        result = {}
        {{#each type.properties}}
        if self.{{snake_case name}} is not None:
            result['{{name}}'] = self.{{snake_case name}}
        {{/each}}
        return result
    
    def __str__(self) -> str:
        """String representation."""
        return f"{{class_name type.name}}({{#each type.properties}}{{snake_case name}}={self.{{snake_case name}}}{{#unless @last}}, {{/unless}}{{/each}})"