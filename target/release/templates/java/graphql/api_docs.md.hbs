# {{spec.name}} API Documentation

{{#if spec.description}}
{{spec.description}}
{{/if}}

**Version:** {{spec.version}}

## Base URL

The base URL for all API operations is configured when creating the client:

```java
ClientConfig config = new ClientConfig("{{spec.servers.[0].url}}");
```

## Authentication

{{#if config.authentication}}
This API uses {{config.authentication.auth_type}} authentication.

{{#if (eq config.authentication.auth_type "ApiKey")}}
### API Key Authentication

Set your API key in the client configuration:

```java
ClientConfig config = new ClientConfig("...")
    .setApiKey("your-api-key-here");
```

{{#if (eq config.authentication.location "Header")}}
The API key will be sent in the `{{config.authentication.parameter_name}}` header.
{{/if}}
{{#if (eq config.authentication.location "Query")}}
The API key will be sent as the `{{config.authentication.parameter_name}}` query parameter.
{{/if}}
{{/if}}

{{#if (eq config.authentication.auth_type "Http")}}
### HTTP Bearer Authentication

Set your bearer token in the client configuration:

```java
ClientConfig config = new ClientConfig("...")
    .setBearerToken("your-bearer-token-here");
```
{{/if}}

{{else}}
No authentication is required for this API.
{{/if}}

## Data Types

{{#each spec.types}}
### {{name}}

{{#if description}}
{{description}}
{{/if}}

{{#if (eq type "object")}}
**Type:** Object

{{#if properties}}
**Properties:**

| Name | Type | Required | Description |
|------|------|----------|-------------|
{{#each properties}}
| `{{name}}` | {{type_mapping data_type}} | {{#if required}}✅{{else}}❌{{/if}} | {{#if description}}{{description}}{{else}}No description{{/if}} |
{{/each}}
{{/if}}
{{/if}}

{{#if (eq type "array")}}
**Type:** Array of {{type_mapping item_type}}
{{/if}}

{{#if (eq type "string")}}
**Type:** String
{{#if enum}}
**Allowed values:** {{#each enum}}`{{this}}`{{#unless @last}}, {{/unless}}{{/each}}
{{/if}}
{{/if}}

---

{{/each}}

## Operations

{{#each spec.operations}}
### {{name}}

{{#if description}}
{{description}}
{{/if}}

**HTTP Method:** `{{method}}`  
**Path:** `{{path}}`

{{#if deprecated}}
⚠️ **This operation is deprecated and may be removed in future versions.**
{{/if}}

#### Parameters

{{#if parameters}}
{{#each parameters}}
**{{name}}** ({{parameter_type}})
- **Type:** {{type_mapping data_type}}
- **Required:** {{#if required}}✅ Yes{{else}}❌ No{{/if}}
- **Description:** {{description}}

{{/each}}
{{else}}
This operation takes no parameters.
{{/if}}

{{#if request_body}}
#### Request Body

**Type:** {{type_mapping request_body}}

{{#if request_body_description}}
{{request_body_description}}
{{/if}}
{{/if}}

#### Responses

{{#each responses}}
**{{code}}** {{#if description}}- {{description}}{{/if}}

{{#if data_type}}
**Response Type:** {{type_mapping data_type}}
{{else}}
**Response Type:** No content
{{/if}}

{{#if schema}}
**Response Schema:**
```json
{{schema}}
```
{{/if}}

{{/each}}

#### Example Usage

**Synchronous:**
```java
{{class_name ../spec.name}}Client client = new {{class_name ../spec.name}}Client(config);

{{#if parameters}}
// Set parameters
{{#each parameters}}
{{type_mapping data_type}} {{camel_case name}} = ...; // {{description}}
{{/each}}
{{/if}}

{{#if request_body}}
// Create request body
{{type_mapping request_body}} requestBody = ...;
{{/if}}

try {
    {{#each responses}}
    {{#if @first}}
    {{#if data_type}}{{type_mapping data_type}} result = client.{{method_name ../name}}({{#each ../parameters}}{{camel_case name}}{{#unless @last}}, {{/unless}}{{/each}}{{#if ../request_body}}{{#if ../parameters}}, {{/if}}requestBody{{/if}});
    System.out.println("Response: " + result);{{else}}client.{{method_name ../name}}({{#each ../parameters}}{{camel_case name}}{{#unless @last}}, {{/unless}}{{/each}}{{#if ../request_body}}{{#if ../parameters}}, {{/if}}requestBody{{/if}});
    System.out.println("Operation completed successfully");{{/if}}
    {{/if}}
    {{/each}}
} catch ({{class_name ../spec.name}}Exception e) {
    System.err.println("Error: " + e.getMessage());
}
```

{{#if features.async}}
**Asynchronous:**
```java
{{class_name ../spec.name}}AsyncClient asyncClient = new {{class_name ../spec.name}}AsyncClient(config);

{{#each responses}}
{{#if @first}}
CompletableFuture<{{#if data_type}}{{type_mapping data_type}}{{else}}Void{{/if}}> future = asyncClient.{{method_name ../name}}Async({{#each ../parameters}}{{camel_case name}}{{#unless @last}}, {{/unless}}{{/each}}{{#if ../request_body}}{{#if ../parameters}}, {{/if}}requestBody{{/if}});

future.thenAccept(result -> {
    {{#if data_type}}System.out.println("Response: " + result);{{else}}System.out.println("Operation completed successfully");{{/if}}
}).exceptionally(throwable -> {
    System.err.println("Error: " + throwable.getMessage());
    return null;
});
{{/if}}
{{/each}}
```
{{/if}}

---

{{/each}}

## Error Handling

All API errors are wrapped in `{{class_name spec.name}}Exception`. This exception provides:

- **Message**: A human-readable error description
- **Cause**: The underlying exception (if any)
- **HTTP Status Code**: Available through the error message

### Common Error Responses

| Status Code | Description |
|-------------|-------------|
| 400 | Bad Request - Invalid parameters or request body |
| 401 | Unauthorized - Missing or invalid authentication |
| 403 | Forbidden - Insufficient permissions |
| 404 | Not Found - Resource does not exist |
| 429 | Too Many Requests - Rate limit exceeded |
| 500 | Internal Server Error - Server-side error |

### Example Error Handling

```java
try {
    // API call
    {{#each spec.operations}}
    {{#if @first}}
    {{#each responses}}
    {{#if @first}}
    {{#if data_type}}{{type_mapping data_type}} result = client.{{method_name ../name}}(...);{{else}}client.{{method_name ../name}}(...);{{/if}}
    {{/if}}
    {{/each}}
    {{/if}}
    {{/each}}
} catch ({{class_name spec.name}}Exception e) {
    if (e.getMessage().contains("HTTP 401")) {
        System.err.println("Authentication failed - check your credentials");
    } else if (e.getMessage().contains("HTTP 429")) {
        System.err.println("Rate limit exceeded - please retry after some time");
    } else {
        System.err.println("API error: " + e.getMessage());
    }
}
```

## Client Configuration

The `ClientConfig` class provides various configuration options:

### Timeouts

```java
config.setConnectTimeoutSeconds(30)    // Connection timeout
      .setRequestTimeoutSeconds(60);   // Request timeout
```

### User Agent

```java
config.setUserAgent("MyApplication/1.0");
```

{{#if features.retry}}
### Retry Configuration

```java
config.setRetryEnabled(true)      // Enable automatic retries
      .setMaxRetries(3)           // Maximum number of retries
      .setRetryDelayMs(1000);     // Delay between retries in milliseconds
```

Retries are automatically performed for:
- Network connectivity issues
- HTTP 5xx server errors
- HTTP 429 (rate limit) responses
{{/if}}

{{#if features.caching}}
### Caching Configuration

```java
config.setCachingEnabled(true)        // Enable response caching
      .setCacheMaxSize(1000)          // Maximum number of cached responses
      .setCacheTtlSeconds(300);       // Time-to-live for cached responses
```

Caching is applied to:
- GET requests only
- Successful responses (HTTP 2xx)
- Responses with cacheable content types
{{/if}}

{{#if features.telemetry}}
### Telemetry Configuration

```java
config.setTelemetryEnabled(true)                           // Enable metrics collection
      .setMetricsEndpoint("https://metrics.example.com");  // Metrics endpoint
```

Collected metrics include:
- Request duration
- Request count by operation
- Error count by operation
- Success/failure rates
{{/if}}

---

*This documentation was generated automatically from the OpenAPI specification.*