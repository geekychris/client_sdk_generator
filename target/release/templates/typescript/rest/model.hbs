/**
 * {{type.description}}
 {{#if type.deprecated}}
 * @deprecated This type is deprecated
 {{/if}}
 */
export interface {{class_name type.name}} {
  {{#each type.properties}}
  /**
   * {{#if description}}{{description}}{{else}}{{name}} property{{/if}}
   {{#if deprecated}}
   * @deprecated This property is deprecated
   {{/if}}
   */
  {{camel_case name}}{{#unless required}}?{{/unless}}: {{type_mapping data_type}};
  {{/each}}
  {{#if type.additional_properties}}
  
  /**
   * Additional properties not defined in the schema
   */
  [key: string]: any;
  {{/if}}
}

{{#if type.enum_values}}
/**
 * Enum values for {{class_name type.name}}
 */
export const {{class_name type.name}}Values = {
  {{#each type.enum_values}}
  {{upper_case this}}: '{{this}}' as const,
  {{/each}}
} as const;

export type {{class_name type.name}}Value = typeof {{class_name type.name}}Values[keyof typeof {{class_name type.name}}Values];
{{/if}}

/**
 * Type guard to check if an object is a valid {{class_name type.name}}
 */
export function is{{class_name type.name}}(obj: any): obj is {{class_name type.name}} {
  if (!obj || typeof obj !== 'object') {
    return false;
  }
  
  {{#each type.properties}}
  {{#if required}}
  if (!('{{camel_case name}}' in obj)) {
    return false;
  }
  {{/if}}
  {{/each}}
  
  return true;
}

/**
 * Creates a new {{class_name type.name}} with default values
 */
export function create{{class_name type.name}}({{#each type.properties}}{{#if required}}{{camel_case name}}: {{type_mapping data_type}}{{#unless @last}}, {{/unless}}{{/if}}{{/each}}): {{class_name type.name}} {
  return {
    {{#each type.properties}}
    {{#if required}}
    {{camel_case name}},
    {{/if}}
    {{/each}}
  };
}

/**
 * Validates a {{class_name type.name}} object
 */
export function validate{{class_name type.name}}(obj: {{class_name type.name}}): string[] {
  const errors: string[] = [];
  
  {{#each type.properties}}
  {{#if required}}
  if (obj.{{camel_case name}} === undefined || obj.{{camel_case name}} === null) {
    errors.push('{{camel_case name}} is required');
  }
  {{/if}}
  {{/each}}
  
  return errors;
}

export default {{class_name type.name}};