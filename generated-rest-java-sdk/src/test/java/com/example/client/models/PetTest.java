package com.example.client.models;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.BeforeEach;

import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.databind.ObjectMapper;

/**
 * Unit tests for Pet model
 * Generated by SDK Generator
 */
@DisplayName("Pet Model Tests")
public class PetTest {
    
    private ObjectMapper objectMapper;
    private Pet model;
    
    @BeforeEach
    void setUp() {
        objectMapper = new ObjectMapper();
        model = new Pet();
    }
    
    @Test
    @DisplayName("Should set and get id")
    void testIdGetterSetter() {
        // Given
        Long expectedValue = 123L;
        
        // When
        model.setId(expectedValue);
        Long actualValue = model.getId();
        
        // Then
        assertEquals(expectedValue, actualValue);
    }
    
    @Test
    @DisplayName("Should support fluent id setting")
    void testIdFluentSetter() {
        // Given
        Long value = 123L;
        
        // When
        Pet result = model.withId(value);
        
        // Then
        assertSame(model, result);
        assertEquals(value, model.getId());
    }
    
    @Test
    @DisplayName("Should set and get name")
    void testNameGetterSetter() {
        // Given
        String expectedValue = "test_value";
        
        // When
        model.setName(expectedValue);
        String actualValue = model.getName();
        
        // Then
        assertEquals(expectedValue, actualValue);
    }
    
    @Test
    @DisplayName("Should support fluent name setting")
    void testNameFluentSetter() {
        // Given
        String value = "test_value";
        
        // When
        Pet result = model.withName(value);
        
        // Then
        assertSame(model, result);
        assertEquals(value, model.getName());
    }
    
    @Test
    @DisplayName("Should set and get tag")
    void testTagGetterSetter() {
        // Given
        String expectedValue = "test_value";
        
        // When
        model.setTag(expectedValue);
        String actualValue = model.getTag();
        
        // Then
        assertEquals(expectedValue, actualValue);
    }
    
    @Test
    @DisplayName("Should support fluent tag setting")
    void testTagFluentSetter() {
        // Given
        String value = "test_value";
        
        // When
        Pet result = model.withTag(value);
        
        // Then
        assertSame(model, result);
        assertEquals(value, model.getTag());
    }
    
    @Test
    @DisplayName("Should set and get status")
    void testStatusGetterSetter() {
        // Given
        String expectedValue = "test_value";
        
        // When
        model.setStatus(expectedValue);
        String actualValue = model.getStatus();
        
        // Then
        assertEquals(expectedValue, actualValue);
    }
    
    @Test
    @DisplayName("Should support fluent status setting")
    void testStatusFluentSetter() {
        // Given
        String value = "test_value";
        
        // When
        Pet result = model.withStatus(value);
        
        // Then
        assertSame(model, result);
        assertEquals(value, model.getStatus());
    }
    
    @Test
    @DisplayName("Should set and get photoUrls")
    void testPhotoUrlsGetterSetter() {
        // Given
        List<String> expectedValue = /* TODO: generate test value */;
        
        // When
        model.setPhotoUrls(expectedValue);
        List<String> actualValue = model.getPhotoUrls();
        
        // Then
        assertEquals(expectedValue, actualValue);
    }
    
    @Test
    @DisplayName("Should support fluent photoUrls setting")
    void testPhotoUrlsFluentSetter() {
        // Given
        List<String> value = /* TODO: generate test value */;
        
        // When
        Pet result = model.withPhotoUrls(value);
        
        // Then
        assertSame(model, result);
        assertEquals(value, model.getPhotoUrls());
    }
    
    @Test
    @DisplayName("Should serialize to JSON")
    void testSerialization() throws Exception {
        // Given
        Pet model = new Pet();
        // TODO: Set test data
        
        // When
        String json = objectMapper.writeValueAsString(model);
        
        // Then
        assertNotNull(json);
        assertFalse(json.isEmpty());
    }
    
    @Test
    @DisplayName("Should deserialize from JSON")
    void testDeserialization() throws Exception {
        // Given
        String json = "{}"; // TODO: Add valid JSON
        
        // When
        Pet result = objectMapper.readValue(json, Pet.class);
        
        // Then
        assertNotNull(result);
    }
    
    @Test
    @DisplayName("Should handle round-trip serialization")
    void testRoundTripSerialization() throws Exception {
        // Given
        Pet original = new Pet();
        // TODO: Set test data
        
        // When
        String json = objectMapper.writeValueAsString(original);
        Pet deserialized = objectMapper.readValue(json, Pet.class);
        
        // Then
        assertEquals(original, deserialized);
    }
    
    @Test
    @DisplayName("Should implement equals correctly")
    void testEquals() {
        // Given
        Pet model1 = new Pet();
        Pet model2 = new Pet();
        Pet model3 = new Pet();
        
        // TODO: Set same data for model1 and model2
        // TODO: Set different data for model3
        
        // When/Then
        assertEquals(model1, model2);
        assertNotEquals(model1, model3);
        assertEquals(model1, model1);
        assertNotEquals(model1, null);
        assertNotEquals(model1, "different type");
    }
    
    @Test
    @DisplayName("Should implement hashCode correctly")
    void testHashCode() {
        // Given
        Pet model1 = new Pet();
        Pet model2 = new Pet();
        
        // TODO: Set same data for both models
        
        // When/Then
        assertEquals(model1.hashCode(), model2.hashCode());
    }
    
    @Test
    @DisplayName("Should implement toString correctly")
    void testToString() {
        // Given
        Pet model = new Pet();
        
        // When
        String result = model.toString();
        
        // Then
        assertNotNull(result);
        assertTrue(result.contains("Pet"));
    }
    
}
