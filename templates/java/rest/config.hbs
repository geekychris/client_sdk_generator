package {{package}};

/**
 * Configuration class for {{spec.name}} Client SDK
 */
public class ClientConfig {
    
    private String baseUrl;
    private int connectTimeoutSeconds = 30;
    private int requestTimeoutSeconds = 60;
    private String userAgent = "{{spec.name}}-client/{{version}}";
    private String apiKey;
    private String bearerToken;
    
    {{#if features.retry}}
    private boolean retryEnabled = true;
    private int maxRetries = 3;
    private int retryDelayMs = 1000;
    {{/if}}
    
    {{#if features.caching}}
    private boolean cachingEnabled = false;
    private int cacheMaxSize = 1000;
    private int cacheTtlSeconds = 300;
    {{/if}}
    
    {{#if features.telemetry}}
    private boolean telemetryEnabled = true;
    private String metricsEndpoint;
    {{/if}}
    
    public ClientConfig(String baseUrl) {
        this.baseUrl = baseUrl;
    }
    
    // Getters and Setters
    
    public String getBaseUrl() {
        return baseUrl;
    }
    
    public ClientConfig setBaseUrl(String baseUrl) {
        this.baseUrl = baseUrl;
        return this;
    }
    
    public int getConnectTimeoutSeconds() {
        return connectTimeoutSeconds;
    }
    
    public ClientConfig setConnectTimeoutSeconds(int connectTimeoutSeconds) {
        this.connectTimeoutSeconds = connectTimeoutSeconds;
        return this;
    }
    
    public int getRequestTimeoutSeconds() {
        return requestTimeoutSeconds;
    }
    
    public ClientConfig setRequestTimeoutSeconds(int requestTimeoutSeconds) {
        this.requestTimeoutSeconds = requestTimeoutSeconds;
        return this;
    }
    
    public String getUserAgent() {
        return userAgent;
    }
    
    public ClientConfig setUserAgent(String userAgent) {
        this.userAgent = userAgent;
        return this;
    }
    
    public String getApiKey() {
        return apiKey;
    }
    
    public ClientConfig setApiKey(String apiKey) {
        this.apiKey = apiKey;
        return this;
    }
    
    public String getBearerToken() {
        return bearerToken;
    }
    
    public ClientConfig setBearerToken(String bearerToken) {
        this.bearerToken = bearerToken;
        return this;
    }
    
    {{#if features.retry}}
    public boolean isRetryEnabled() {
        return retryEnabled;
    }
    
    public ClientConfig setRetryEnabled(boolean retryEnabled) {
        this.retryEnabled = retryEnabled;
        return this;
    }
    
    public int getMaxRetries() {
        return maxRetries;
    }
    
    public ClientConfig setMaxRetries(int maxRetries) {
        this.maxRetries = maxRetries;
        return this;
    }
    
    public int getRetryDelayMs() {
        return retryDelayMs;
    }
    
    public ClientConfig setRetryDelayMs(int retryDelayMs) {
        this.retryDelayMs = retryDelayMs;
        return this;
    }
    {{/if}}
    
    {{#if features.caching}}
    public boolean isCachingEnabled() {
        return cachingEnabled;
    }
    
    public ClientConfig setCachingEnabled(boolean cachingEnabled) {
        this.cachingEnabled = cachingEnabled;
        return this;
    }
    
    public int getCacheMaxSize() {
        return cacheMaxSize;
    }
    
    public ClientConfig setCacheMaxSize(int cacheMaxSize) {
        this.cacheMaxSize = cacheMaxSize;
        return this;
    }
    
    public int getCacheTtlSeconds() {
        return cacheTtlSeconds;
    }
    
    public ClientConfig setCacheTtlSeconds(int cacheTtlSeconds) {
        this.cacheTtlSeconds = cacheTtlSeconds;
        return this;
    }
    {{/if}}
    
    {{#if features.telemetry}}
    public boolean isTelemetryEnabled() {
        return telemetryEnabled;
    }
    
    public ClientConfig setTelemetryEnabled(boolean telemetryEnabled) {
        this.telemetryEnabled = telemetryEnabled;
        return this;
    }
    
    public String getMetricsEndpoint() {
        return metricsEndpoint;
    }
    
    public ClientConfig setMetricsEndpoint(String metricsEndpoint) {
        this.metricsEndpoint = metricsEndpoint;
        return this;
    }
    {{/if}}
}