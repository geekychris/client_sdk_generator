# {{api_name}} Go SDK

{{#if description}}{{description}}{{/if}}

A Go client library for the {{api_name}} API, generated by client-sdk-generator.

## Installation

```bash
go mod init your-project
go get {{go_module}}
```

## Usage

### Basic Usage

```go
package main

import (
    "context"
    "fmt"
    "log"
    "{{go_module}}"
)

func main() {
    config := {{package_name}}.ClientConfig{
        BaseURL: "{{base_url}}",
        {{#if authentication}}
        Auth: &{{package_name}}.AuthConfig{
            {{#if supports_bearer_auth}}
            BearerToken: "your-token-here",
            {{/if}}
            {{#if supports_api_key}}
            APIKey: "your-api-key-here",
            {{/if}}
        },
        {{/if}}
    }
    
    client := {{package_name}}.New{{class_name}}(config)
    ctx := context.Background()
    
    {{#each operations}}
    {{#if @first}}
    // Example: {{name}}
    result, err := client.{{go_name name}}(ctx{{#each parameters}}, /* {{go_name name}} */{{/each}})
    if err != nil {
        log.Fatal(err)
    }
    fmt.Printf("Result: %+v\n", result)
    {{/if}}
    {{/each}}
}
```

{{#if authentication}}
### Authentication

This SDK supports the following authentication methods:

{{#if supports_bearer_auth}}
#### Bearer Token (HTTP)

```go
config := {{package_name}}.ClientConfig{
    BaseURL: "{{base_url}}",
    Auth: &{{package_name}}.AuthConfig{
        BearerToken: "your-jwt-token",
    },
}
```
{{/if}}

{{#if supports_api_key}}
#### API Key

```go
config := {{package_name}}.ClientConfig{
    BaseURL: "{{base_url}}",
    Auth: &{{package_name}}.AuthConfig{
        APIKey: "your-api-key",
    },
}
```
{{/if}}

You can also update authentication credentials after creating the client:

```go
client := {{package_name}}.New{{class_name}}(config)
{{#if supports_bearer_auth}}
client.SetBearerToken("new-token")
{{/if}}
{{#if supports_api_key}}
client.SetAPIKey("new-api-key")
{{/if}}
```
{{/if}}

## API Reference

### Client Methods

{{#each operations}}
#### `{{go_name name}}(ctx context.Context{{#each parameters}}, {{camelCase name}} {{go_type data_type}}{{/each}}) ({{response_type}}, error)`

{{#if description}}{{description}}{{/if}}

{{#if parameters}}
**Parameters:**
{{#each parameters}}
- `{{camelCase name}}` ({{go_type data_type}}) - {{#if description}}{{description}}{{else}}{{name}} parameter{{/if}}{{#if required}} (required){{/if}}
{{/each}}
{{/if}}

**Returns:** `{{response_type}}`

{{/each}}

### Data Types

{{#each types}}
#### `{{go_name name}}`

{{#if description}}{{description}}{{/if}}

```go
type {{go_name name}} struct {
    {{#each properties}}
    {{go_name name}} {{go_type data_type}} `json:"{{json_name}}"` {{#if description}}// {{description}}{{/if}}
    {{/each}}
}
```

{{/each}}

## Features

{{#if retry}}
- **Automatic Retry**: Failed requests are automatically retried with exponential backoff
{{/if}}
{{#if telemetry}}
- **Telemetry**: Built-in metrics and tracing support
{{/if}}
{{#if caching}}
- **Response Caching**: Configurable response caching to improve performance
{{/if}}
- **Context Support**: All methods support Go's context for cancellation and timeouts
- **Type Safety**: Strongly typed request and response models
- **Error Handling**: Comprehensive error types with retry indicators

## Error Handling

The SDK returns structured errors that implement the `error` interface:

```go
result, err := client.SomeMethod(ctx, params)
if err != nil {
    if apiErr, ok := err.({{package_name}}.APIError); ok {
        fmt.Printf("API Error %d: %s\n", apiErr.Status, apiErr.Message)
        if apiErr.IsRetryable() {
            // Handle retryable error
        }
    } else {
        // Handle other errors
        log.Fatal(err)
    }
}
```

## License

This SDK is generated by client-sdk-generator and is available under the MIT License.