# {{api_name}} TypeScript SDK

{{#if description}}{{description}}{{/if}}

A TypeScript/JavaScript client library for the {{api_name}} API, generated by client-sdk-generator.

## Installation

```bash
npm install {{package_name}}
# or
yarn add {{package_name}}
```

## Usage

### Basic Usage (ES6/TypeScript)

```typescript
import { {{class_name}} } from '{{package_name}}';

const client = new {{class_name}}({
  baseURL: '{{base_url}}',
  {{#if authentication}}
  auth: {
    {{#if supports_bearer_auth}}
    bearerToken: 'your-token-here',
    {{/if}}
    {{#if supports_api_key}}
    apiKey: 'your-api-key-here',
    {{/if}}
  },
  {{/if}}
});

{{#each operations}}
{{#if @first}}
// Example: {{name}}
try {
  const result = await client.{{camel_case name}}({{#each parameters}}/* {{camel_name}} */{{#unless @last}}, {{/unless}}{{/each}});
  console.log(result);
} catch (error) {
  console.error('API Error:', error);
}
{{/if}}
{{/each}}
```

### CommonJS Usage

```javascript
const { {{class_name}} } = require('{{package_name}}');

const client = new {{class_name}}({
  baseURL: '{{base_url}}',
  {{#if authentication}}
  auth: {
    {{#if supports_bearer_auth}}
    bearerToken: 'your-token-here',
    {{/if}}
    {{#if supports_api_key}}
    apiKey: 'your-api-key-here',
    {{/if}}
  },
  {{/if}}
});
```

{{#if authentication}}
### Authentication

This SDK supports the following authentication methods:

{{#if supports_bearer_auth}}
#### Bearer Token (HTTP)

```typescript
const client = new {{class_name}}({
  baseURL: '{{base_url}}',
  auth: {
    bearerToken: 'your-jwt-token',
  },
});

// Update token dynamically
client.setBearerToken('new-token');
```
{{/if}}

{{#if supports_api_key}}
#### API Key

```typescript
const client = new {{class_name}}({
  baseURL: '{{base_url}}',
  auth: {
    apiKey: 'your-api-key',
  },
});

// Update API key dynamically
client.setApiKey('new-api-key');
```
{{/if}}
{{/if}}

## API Reference

### Client Configuration

```typescript
interface ClientConfig {
  baseURL: string;
  {{#if authentication}}
  auth?: {
    {{#if supports_api_key}}
    apiKey?: string;
    {{/if}}
    {{#if supports_bearer_auth}}
    bearerToken?: string;
    {{/if}}
  };
  {{/if}}
  {{#if retry}}
  maxRetries?: number;
  {{/if}}
  timeout?: number;
  headers?: Record<string, string>;
}
```

### Client Methods

{{#each operations}}
#### `{{camel_case name}}({{#each parameters}}{{camel_name}}{{#unless required}}?{{/unless}}: {{ts_type}}{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{response_type}}>`

{{#if description}}{{description}}{{/if}}

{{#if parameters}}
**Parameters:**
{{#each parameters}}
- `{{camel_name}}` ({{ts_type}}) - {{#if description}}{{description}}{{else}}{{name}} parameter{{/if}}{{#unless required}} (optional){{/unless}}
{{/each}}
{{/if}}

**Returns:** `Promise<{{response_type}}>`

{{/each}}

### Data Types

{{#each types}}
#### `{{name}}`

{{#if description}}{{description}}{{/if}}

```typescript
interface {{name}} {
  {{#each properties}}
  {{camel_name}}{{optional_marker}}: {{ts_type}};{{#if description}} // {{description}}{{/if}}
  {{/each}}
}
```

{{/each}}

## Features

{{#if retry}}
- **Automatic Retry**: Failed requests are automatically retried with exponential backoff
{{/if}}
{{#if telemetry}}
- **Telemetry**: Built-in metrics and tracing support
{{/if}}
{{#if caching}}
- **Response Caching**: Configurable response caching to improve performance
{{/if}}
- **Promise-based**: All methods return Promises for easy async/await usage
- **TypeScript Support**: Full TypeScript definitions included
- **Error Handling**: Comprehensive error types with structured error responses
- **Timeout Support**: Configurable request timeouts
- **Request Cancellation**: Built-in AbortController support

## Error Handling

The SDK throws structured errors that extend the built-in `Error` class:

```typescript
import { {{class_name}}, APIClientError } from '{{package_name}}';

try {
  const result = await client.someMethod();
} catch (error) {
  if (error instanceof APIClientError) {
    console.error(`API Error ${error.status}: ${error.message}`);
    
    // Check if error is retryable
    if (error.isRetryable()) {
      // Handle retryable error
    }
  } else {
    // Handle other errors
    console.error('Unexpected error:', error);
  }
}
```

## Browser Support

This SDK works in modern browsers and Node.js environments:

- **Node.js**: 16.0.0 or higher
- **Browsers**: All modern browsers (Chrome, Firefox, Safari, Edge)
- **TypeScript**: 4.0.0 or higher

## Development

### Building

```bash
npm run build
```

### Type Checking

```bash
npm run typecheck
```

### Linting

```bash
npm run lint
npm run lint:fix
```

### Testing

```bash
npm test
npm run test:watch
```

## License

This SDK is generated by client-sdk-generator and is available under the MIT License.