/**
 * {{api_name}} TypeScript GraphQL SDK Configuration
 * Generated by client-sdk-generator
 */

{{#if authentication}}
/**
 * Authentication configuration options
 */
export interface AuthConfig {
  {{#if supports_api_key}}
  /** API key for authentication */
  apiKey?: string;
  {{/if}}
  {{#if supports_bearer_auth}}
  /** Bearer token for authentication */
  bearerToken?: string;
  {{/if}}
  /** Custom authentication headers */
  customHeaders?: Record<string, string>;
}
{{/if}}

{{#if features.retry}}
/**
 * Retry configuration options
 */
export interface RetryConfig {
  /** Maximum number of retry attempts */
  maxRetries: number;
  /** Base delay between retries in milliseconds */
  baseDelay: number;
  /** Maximum delay between retries in milliseconds */
  maxDelay: number;
  /** Exponential backoff multiplier */
  backoffMultiplier: number;
  /** HTTP status codes that should trigger a retry */
  retryableCodes: number[];
}
{{/if}}

{{#if features.caching}}
/**
 * Caching configuration options
 */
export interface CacheConfig {
  /** Enable or disable caching */
  enabled: boolean;
  /** Time-to-live for cached responses in milliseconds */
  ttl: number;
  /** Maximum number of cached responses */
  maxSize: number;
}
{{/if}}

{{#if features.telemetry}}
/**
 * Telemetry configuration options
 */
export interface TelemetryConfig {
  /** Enable or disable telemetry */
  enabled: boolean;
  /** Endpoint for sending metrics */
  metricsEndpoint?: string;
  /** Service name for telemetry */
  serviceName: string;
}
{{/if}}

/**
 * GraphQL-specific configuration options
 */
export interface GraphQLConfig {
  /** Enable GraphQL introspection queries */
  enableIntrospection: boolean;
  /** Maximum query depth allowed */
  maxQueryDepth: number;
  /** Enable automatic query optimization */
  optimizeQueries: boolean;
  /** Include GraphQL extensions in responses */
  includeExtensions: boolean;
}

/**
 * Client configuration options for {{api_name}} GraphQL API
 */
export interface ClientConfig {
  /** GraphQL endpoint URL */
  baseURL: string;
  
  /** Request timeout in milliseconds */
  timeout?: number;
  
  /** Default headers to include with every request */
  defaultHeaders?: Record<string, string>;
  
  /** User agent string */
  userAgent?: string;
  
  {{#if authentication}}
  /** Authentication configuration */
  auth?: AuthConfig;
  {{/if}}
  
  {{#if features.retry}}
  /** Retry configuration */
  retry?: RetryConfig;
  {{/if}}
  
  {{#if features.caching}}
  /** Cache configuration */
  cache?: CacheConfig;
  {{/if}}
  
  {{#if features.telemetry}}
  /** Telemetry configuration */
  telemetry?: TelemetryConfig;
  {{/if}}
  
  /** GraphQL-specific configuration */
  graphql?: GraphQLConfig;
  
  /** Custom fetch implementation (defaults to global fetch) */
  fetch?: typeof fetch;
  
  /** Enable debug logging */
  debug?: boolean;
}

/**
 * Default configuration values
 */
export const DEFAULT_CONFIG: Partial<ClientConfig> = {
  timeout: 30000, // 30 seconds
  userAgent: '{{package}}-graphql-client/{{version}}',
  {{#if features.retry}}
  retry: {
    maxRetries: 3,
    baseDelay: 1000,
    maxDelay: 10000,
    backoffMultiplier: 2,
    retryableCodes: [408, 429, 500, 502, 503, 504],
  },
  {{/if}}
  {{#if features.caching}}
  cache: {
    enabled: false,
    ttl: 300000, // 5 minutes
    maxSize: 1000,
  },
  {{/if}}
  {{#if features.telemetry}}
  telemetry: {
    enabled: true,
    serviceName: '{{package}}-graphql-client',
  },
  {{/if}}
  graphql: {
    enableIntrospection: false,
    maxQueryDepth: 15,
    optimizeQueries: true,
    includeExtensions: true,
  },
  debug: false,
};

/**
 * Merge user configuration with defaults
 */
export function createConfig(userConfig: ClientConfig): Required<ClientConfig> {
  return {
    ...DEFAULT_CONFIG,
    ...userConfig,
    defaultHeaders: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
      ...DEFAULT_CONFIG.defaultHeaders,
      ...userConfig.defaultHeaders,
    },
    {{#if authentication}}
    auth: userConfig.auth ? { ...userConfig.auth } : undefined,
    {{/if}}
    {{#if features.retry}}
    retry: userConfig.retry ? { ...DEFAULT_CONFIG.retry, ...userConfig.retry } : DEFAULT_CONFIG.retry!,
    {{/if}}
    {{#if features.caching}}
    cache: userConfig.cache ? { ...DEFAULT_CONFIG.cache, ...userConfig.cache } : DEFAULT_CONFIG.cache!,
    {{/if}}
    {{#if features.telemetry}}
    telemetry: userConfig.telemetry ? { ...DEFAULT_CONFIG.telemetry, ...userConfig.telemetry } : DEFAULT_CONFIG.telemetry!,
    {{/if}}
    graphql: userConfig.graphql ? { ...DEFAULT_CONFIG.graphql, ...userConfig.graphql } : DEFAULT_CONFIG.graphql!,
    fetch: userConfig.fetch || (typeof window !== 'undefined' ? window.fetch : require('node-fetch')),
  } as Required<ClientConfig>;
}