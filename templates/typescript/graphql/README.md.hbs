# {{api_name}} TypeScript GraphQL SDK

{{#if description}}{{description}}{{/if}}

A TypeScript/JavaScript GraphQL client library for the {{api_name}} API, generated by client-sdk-generator.

## Installation

```bash
npm install {{package_name}}
# or
yarn add {{package_name}}
```

## Usage

### Basic Usage (ES6/TypeScript)

```typescript
import { GraphQLClient } from '{{package_name}}';

const client = new GraphQLClient({
  endpoint: '{{base_url}}',
  {{#if authentication}}
  auth: {
    {{#if supports_bearer_auth}}
    bearerToken: 'your-token-here',
    {{/if}}
    {{#if supports_api_key}}
    apiKey: 'your-api-key-here',
    {{/if}}
  },
  {{/if}}
});

// Execute a simple query
const query = `
  query {
    users {
      id
      name
      email
    }
  }
`;

try {
  const result = await client.query(query);
  console.log(result.data);
} catch (error) {
  console.error('GraphQL Error:', error);
}
```

### CommonJS Usage

```javascript
const { GraphQLClient } = require('{{package_name}}');

const client = new GraphQLClient({
  endpoint: '{{base_url}}',
  {{#if authentication}}
  auth: {
    {{#if supports_bearer_auth}}
    bearerToken: 'your-token-here',
    {{/if}}
    {{#if supports_api_key}}
    apiKey: 'your-api-key-here',
    {{/if}}
  },
  {{/if}}
});
```

{{#if authentication}}
### Authentication

This SDK supports the following authentication methods:

{{#if supports_bearer_auth}}
#### Bearer Token (HTTP)

```typescript
const client = new GraphQLClient({
  endpoint: '{{base_url}}',
  auth: {
    bearerToken: 'your-jwt-token',
  },
});

// Update token dynamically
client.setBearerToken('new-token');
```
{{/if}}

{{#if supports_api_key}}
#### API Key

```typescript
const client = new GraphQLClient({
  endpoint: '{{base_url}}',
  auth: {
    apiKey: 'your-api-key',
  },
});

// Update API key dynamically
client.setApiKey('new-api-key');
```
{{/if}}
{{/if}}

## GraphQL Operations

### Queries

Execute GraphQL queries using the `query` method:

```typescript
// Simple query
const query = `
  query {
    users {
      id
      name
      email
    }
  }
`;

const result = await client.query(query);

// Query with variables
const queryWithVars = `
  query GetUser($id: ID!) {
    user(id: $id) {
      id
      name
      email
      profile {
        bio
        avatarUrl
      }
    }
  }
`;

const variables = { id: '123' };
const userResult = await client.query(queryWithVars, { variables });
```

### Mutations

Execute GraphQL mutations using the `mutate` method:

```typescript
// Create mutation
const createMutation = `
  mutation CreateUser($input: CreateUserInput!) {
    createUser(input: $input) {
      id
      name
      email
    }
  }
`;

const variables = {
  input: {
    name: 'John Doe',
    email: 'john@example.com',
  },
};

const createResult = await client.mutate(createMutation, { variables });

// Update mutation
const updateMutation = `
  mutation UpdateUser($id: ID!, $input: UpdateUserInput!) {
    updateUser(id: $id, input: $input) {
      id
      name
      email
      updatedAt
    }
  }
`;

const updateVars = {
  id: '123',
  input: {
    name: 'John Smith',
  },
};

const updateResult = await client.mutate(updateMutation, { variables: updateVars });
```

### Subscriptions

Execute GraphQL subscriptions using the `subscribe` method:

```typescript
// Subscribe to real-time updates
const subscription = `
  subscription UserUpdates {
    userUpdates {
      id
      name
      status
      lastSeen
    }
  }
`;

// Using async iteration
for await (const update of client.subscribe(subscription)) {
  console.log('User updated:', update.data);
}

// Using callback
client.subscribe(subscription, {
  next: (data) => {
    console.log('User updated:', data);
  },
  error: (err) => {
    console.error('Subscription error:', err);
  },
  complete: () => {
    console.log('Subscription complete');
  },
});

// Subscription with variables
const notificationsSub = `
  subscription NotificationsByUser($userId: ID!) {
    notifications(userId: $userId) {
      id
      message
      createdAt
    }
  }
`;

const subVars = { userId: '123' };

for await (const notification of client.subscribe(notificationsSub, { variables: subVars })) {
  console.log('New notification:', notification.data);
}
```

## API Reference

### Client Configuration

```typescript
interface GraphQLClientConfig {
  endpoint: string;
  {{#if authentication}}
  auth?: {
    {{#if supports_api_key}}
    apiKey?: string;
    {{/if}}
    {{#if supports_bearer_auth}}
    bearerToken?: string;
    {{/if}}
  };
  {{/if}}
  headers?: Record<string, string>;
  timeout?: number;
  {{#if retry}}
  maxRetries?: number;
  {{/if}}
  {{#if caching}}
  cache?: boolean;
  cacheMaxAge?: number;
  {{/if}}
}
```

### Client Methods

#### `query<T = any>(query: string, options?: QueryOptions): Promise<GraphQLResult<T>>`

Execute a GraphQL query.

**Parameters:**
- `query` (string) - The GraphQL query string
- `options` (QueryOptions, optional) - Query options including variables, headers, etc.

**Returns:** `Promise<GraphQLResult<T>>`

#### `mutate<T = any>(mutation: string, options?: MutationOptions): Promise<GraphQLResult<T>>`

Execute a GraphQL mutation.

**Parameters:**
- `mutation` (string) - The GraphQL mutation string
- `options` (MutationOptions, optional) - Mutation options including variables, headers, etc.

**Returns:** `Promise<GraphQLResult<T>>`

#### `subscribe<T = any>(subscription: string, options?: SubscriptionOptions): AsyncIterable<GraphQLResult<T>>`

Execute a GraphQL subscription.

**Parameters:**
- `subscription` (string) - The GraphQL subscription string
- `options` (SubscriptionOptions, optional) - Subscription options including variables, headers, etc.

**Returns:** `AsyncIterable<GraphQLResult<T>>`

### Data Types

{{#each types}}
#### `{{name}}`

{{#if description}}{{description}}{{/if}}

```typescript
interface {{name}} {
  {{#each properties}}
  {{camel_case name}}{{#unless required}}?{{/unless}}: {{ts_type data_type}};{{#if description}} // {{description}}{{/if}}
  {{/each}}
}
```

{{/each}}

### Response Types

```typescript
interface GraphQLResult<T = any> {
  data?: T;
  errors?: GraphQLError[];
  extensions?: Record<string, any>;
}

interface GraphQLError {
  message: string;
  locations?: Array<{
    line: number;
    column: number;
  }>;
  path?: Array<string | number>;
  extensions?: Record<string, any>;
}
```

## Features

{{#if retry}}
- **Automatic Retry**: Failed requests are automatically retried with exponential backoff
{{/if}}
{{#if telemetry}}
- **Telemetry**: Built-in metrics and tracing support
{{/if}}
{{#if caching}}
- **Query Caching**: Configurable query result caching to improve performance
{{/if}}
- **Promise-based**: All methods return Promises for easy async/await usage
- **TypeScript Support**: Full TypeScript definitions included
- **Subscription Support**: Real-time GraphQL subscriptions via WebSocket
- **Error Handling**: Comprehensive GraphQL error handling
- **Request Cancellation**: Built-in AbortController support

## Error Handling

The SDK provides comprehensive error handling for GraphQL operations:

```typescript
import { GraphQLClient, GraphQLClientError } from '{{package_name}}';

try {
  const result = await client.query('{ user { id name } }');
  console.log(result.data);
} catch (error) {
  if (error instanceof GraphQLClientError) {
    console.error('GraphQL Client Error:', error.message);
    
    // Access GraphQL errors
    if (error.graphqlErrors) {
      error.graphqlErrors.forEach((gqlError) => {
        console.error(`  - ${gqlError.message}`);
      });
    }
    
    // Access network errors
    if (error.networkError) {
      console.error('Network Error:', error.networkError);
    }
    
    // Access extensions
    if (error.extensions) {
      console.error('Extensions:', error.extensions);
    }
  } else {
    console.error('Unexpected error:', error);
  }
}
```

### Common Error Types

- **ValidationError**: Query validation failed
- **ExecutionError**: Query execution failed
- **AuthenticationError**: Authentication failed
- **NetworkError**: Network connectivity issues
- **TimeoutError**: Request timeout
- **SubscriptionError**: WebSocket subscription error

## Browser and Node.js Support

This SDK works in both browser and Node.js environments:

### Node.js
```typescript
import { GraphQLClient } from '{{package_name}}';
// or
const { GraphQLClient } = require('{{package_name}}');
```

### Browser (ES6)
```typescript
import { GraphQLClient } from '{{package_name}}';
```

### Browser (UMD)
```html
<script src="https://unpkg.com/{{package_name}}/dist/index.umd.js"></script>
<script>
  const client = new GraphQLSDK.GraphQLClient({
    endpoint: '{{base_url}}',
  });
</script>
```

## Environment Variables

You can configure the client using environment variables:

```bash
export GRAPHQL_ENDPOINT="{{base_url}}"
export API_KEY="your-api-key"
export API_TIMEOUT="30000"
```

```typescript
const client = new GraphQLClient({
  endpoint: process.env.GRAPHQL_ENDPOINT!,
  auth: {
    apiKey: process.env.API_KEY,
  },
  timeout: parseInt(process.env.API_TIMEOUT || '30000'),
});
```

## Development

### Building

```bash
npm run build
```

### Type Checking

```bash
npm run typecheck
```

### Linting

```bash
npm run lint
npm run lint:fix
```

### Testing

```bash
npm test
npm run test:watch
```

## License

This SDK is generated by client-sdk-generator and is available under the MIT License.