# {{api_name}} TypeScript gRPC SDK

{{#if description}}{{description}}{{/if}}

A TypeScript/JavaScript gRPC client library for the {{api_name}} API, generated by client-sdk-generator.

## Installation

```bash
npm install {{package_name}}
# or
yarn add {{package_name}}
```

## Usage

### Basic Usage (ES6/TypeScript)

```typescript
import { GrpcClient } from '{{package_name}}';

const client = new GrpcClient({
  host: 'api.example.com',
  port: 443,
  useTLS: true,
  {{#if authentication}}
  auth: {
    {{#if supports_bearer_auth}}
    bearerToken: 'your-token-here',
    {{/if}}
    {{#if supports_api_key}}
    apiKey: 'your-api-key-here',
    {{/if}}
  },
  {{/if}}
});

// Example service call
const request = {
  message: 'Hello, gRPC!',
};

try {
  const response = await client.exampleMethod(request);
  console.log(response);
} catch (error) {
  console.error('gRPC Error:', error);
}

// Don't forget to close the client when done
await client.close();
```

### CommonJS Usage

```javascript
const { GrpcClient } = require('{{package_name}}');

const client = new GrpcClient({
  host: 'api.example.com',
  port: 443,
  useTLS: true,
  {{#if authentication}}
  auth: {
    {{#if supports_bearer_auth}}
    bearerToken: 'your-token-here',
    {{/if}}
    {{#if supports_api_key}}
    apiKey: 'your-api-key-here',
    {{/if}}
  },
  {{/if}}
});
```

{{#if authentication}}
### Authentication

This SDK supports the following authentication methods:

{{#if supports_bearer_auth}}
#### Bearer Token Authentication

```typescript
const client = new GrpcClient({
  host: 'api.example.com',
  port: 443,
  useTLS: true,
  auth: {
    bearerToken: 'your-jwt-token',
  },
});

// Update token dynamically
client.setBearerToken('new-token');
```
{{/if}}

{{#if supports_api_key}}
#### API Key Authentication

```typescript
const client = new GrpcClient({
  host: 'api.example.com',
  port: 443,
  useTLS: true,
  auth: {
    apiKey: 'your-api-key',
  },
});

// Update API key dynamically
client.setApiKey('new-api-key');
```
{{/if}}
{{/if}}

## gRPC Operations

### Unary Calls

Execute single request-response operations:

```typescript
// Simple unary call
const request = {
  id: '123',
  name: 'Example',
};

const response = await client.getData(request);
console.log(response);

// With timeout
const response = await client.getData(request, {
  timeout: 10000, // 10 seconds
});
```

### Server Streaming

Handle server-to-client streaming:

```typescript
const request = {
  query: 'streaming-data',
};

const stream = client.getStreamingData(request);

// Using async iteration
for await (const response of stream) {
  console.log('Received:', response);
}

// Using callback
stream.on('data', (response) => {
  console.log('Received:', response);
});

stream.on('error', (error) => {
  console.error('Stream error:', error);
});

stream.on('end', () => {
  console.log('Stream ended');
});
```

### Client Streaming

Send multiple requests to the server:

```typescript
const stream = client.sendStreamingData();

// Send multiple requests
for (let i = 0; i < 10; i++) {
  await stream.write({
    data: `message-${i}`,
  });
}

// End the stream and get response
const response = await stream.end();
console.log('Final response:', response);
```

### Bidirectional Streaming

Handle both client and server streaming:

```typescript
const stream = client.bidirectionalStream();

// Handle incoming data
stream.on('data', (response) => {
  console.log('Received:', response);
});

// Send data
for (let i = 0; i < 5; i++) {
  await stream.write({
    message: `hello-${i}`,
  });
}

// End the stream
await stream.end();
```

## API Reference

### Client Configuration

```typescript
interface GrpcClientConfig {
  host: string;
  port: number;
  useTLS?: boolean;
  {{#if authentication}}
  auth?: {
    {{#if supports_api_key}}
    apiKey?: string;
    {{/if}}
    {{#if supports_bearer_auth}}
    bearerToken?: string;
    {{/if}}
  };
  {{/if}}
  timeout?: number;
  {{#if retry}}
  maxRetries?: number;
  {{/if}}
  keepAlive?: boolean;
  keepAliveTime?: number;
  keepAliveTimeout?: number;
  maxReceiveMessageSize?: number;
  maxSendMessageSize?: number;
}
```

### Service Methods

{{#each services}}
#### {{pascal_case name}} Service

{{#if description}}{{description}}{{/if}}

{{#each methods}}
##### `{{camel_case name}}(request: {{pascal_case request_type}}{{#unless streaming}}, options?: CallOptions{{/unless}}): {{#if client_streaming}}ClientWritableStream<{{pascal_case request_type}}, {{pascal_case response_type}}>{{else if server_streaming}}AsyncIterable<{{pascal_case response_type}}>{{else if bidirectional_streaming}}BidirectionalStream<{{pascal_case request_type}}, {{pascal_case response_type}}>{{else}}Promise<{{pascal_case response_type}}>{{/if}}`

{{#if description}}{{description}}{{/if}}

**Request Type:** `{{pascal_case request_type}}`  
**Response Type:** `{{pascal_case response_type}}`  
{{#if streaming}}**Streaming:** {{streaming_type}}{{/if}}

{{/each}}
{{/each}}

### Message Types

{{#each messages}}
#### `{{pascal_case name}}`

{{#if description}}{{description}}{{/if}}

```typescript
interface {{pascal_case name}} {
  {{#each fields}}
  {{camel_case name}}{{#unless required}}?{{/unless}}: {{ts_type field_type}};{{#if description}} // {{description}}{{/if}}
  {{/each}}
}
```

{{/each}}

## Features

{{#if retry}}
- **Automatic Retry**: Failed requests are automatically retried with exponential backoff
{{/if}}
{{#if telemetry}}
- **Telemetry**: Built-in metrics and tracing support
{{/if}}
{{#if caching}}
- **Response Caching**: Configurable response caching to improve performance
{{/if}}
- **Promise-based**: All unary methods return Promises for easy async/await usage
- **TypeScript Support**: Full TypeScript definitions included
- **Streaming Support**: Full support for all gRPC streaming patterns
- **Error Handling**: Comprehensive gRPC status code handling
- **Connection Management**: Automatic connection pooling and health checking

## Error Handling

The SDK provides comprehensive error handling for gRPC operations:

```typescript
import { GrpcClient, GrpcError } from '{{package_name}}';
import { Status } from '@grpc/grpc-js/build/src/constants';

try {
  const response = await client.someMethod(request);
  console.log(response);
} catch (error) {
  if (error instanceof GrpcError) {
    console.error('gRPC Error:', error.message);
    console.error('Status Code:', error.code);
    
    // Handle specific error codes
    switch (error.code) {
      case Status.NOT_FOUND:
        console.error('Resource not found');
        break;
      case Status.PERMISSION_DENIED:
        console.error('Permission denied');
        break;
      case Status.UNAUTHENTICATED:
        console.error('Authentication failed');
        break;
      case Status.DEADLINE_EXCEEDED:
        console.error('Request timeout');
        break;
      case Status.UNAVAILABLE:
        console.error('Service unavailable');
        break;
      default:
        console.error('Other gRPC error');
    }
    
    // Access error details
    if (error.details) {
      console.error('Error details:', error.details);
    }
    
    // Access metadata
    if (error.metadata) {
      console.error('Error metadata:', error.metadata.getMap());
    }
  } else {
    console.error('Unexpected error:', error);
  }
}
```

### Common gRPC Status Codes

- `OK` (0): Success
- `CANCELLED` (1): Operation was cancelled
- `UNKNOWN` (2): Unknown error
- `INVALID_ARGUMENT` (3): Invalid arguments provided
- `DEADLINE_EXCEEDED` (4): Request timeout
- `NOT_FOUND` (5): Resource not found
- `ALREADY_EXISTS` (6): Resource already exists
- `PERMISSION_DENIED` (7): Insufficient permissions
- `RESOURCE_EXHAUSTED` (8): Resource exhausted (rate limiting)
- `UNAUTHENTICATED` (16): Authentication failed

## Advanced Usage

### Custom Headers

Add custom metadata to requests:

```typescript
const response = await client.someMethod(request, {
  metadata: {
    'custom-header': 'custom-value',
    'user-id': '123',
  },
});
```

### Request Timeouts

Set timeouts for individual requests:

```typescript
const response = await client.someMethod(request, {
  timeout: 5000, // 5 seconds
});
```

### Cancelling Requests

Cancel ongoing requests:

```typescript
const controller = new AbortController();

// Start the request
const responsePromise = client.someMethod(request, {
  signal: controller.signal,
});

// Cancel after 3 seconds
setTimeout(() => {
  controller.abort();
}, 3000);

try {
  const response = await responsePromise;
} catch (error) {
  if (error.name === 'AbortError') {
    console.log('Request was cancelled');
  }
}
```

### Health Checking

Check the health of the gRPC connection:

```typescript
const isHealthy = await client.healthCheck();
if (!isHealthy) {
  console.log('Service is not healthy');
  // Handle reconnection or error
}
```

## Browser and Node.js Support

This SDK works in both browser and Node.js environments:

### Node.js
```typescript
import { GrpcClient } from '{{package_name}}';
// or
const { GrpcClient } = require('{{package_name}}');
```

### Browser (with gRPC-Web)
```typescript
import { GrpcClient } from '{{package_name}}/web';
```

### Configuration for Different Environments

```typescript
// Node.js configuration
const nodeClient = new GrpcClient({
  host: 'api.example.com',
  port: 443,
  useTLS: true,
});

// Browser configuration (gRPC-Web)
const webClient = new GrpcClient({
  host: 'api.example.com',
  port: 443,
  useTLS: true,
  web: true, // Enable gRPC-Web mode
});
```

## Development

### Building

```bash
npm run build
```

### Type Checking

```bash
npm run typecheck
```

### Linting

```bash
npm run lint
npm run lint:fix
```

### Testing

```bash
npm test
npm run test:watch
```

### Generating Protobuf Types

If you need to regenerate the protobuf types:

```bash
npm run proto:generate
```

## License

This SDK is generated by client-sdk-generator and is available under the MIT License.