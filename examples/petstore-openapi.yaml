openapi: 3.0.3
info:
  title: Pet Store API
  description: A sample API that uses a pet store as an example
  version: 1.0.0
  contact:
    name: API Support
    email: support@petstore.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.petstore.com/v1
    description: Production server
  - url: https://staging-api.petstore.com/v1
    description: Staging server

paths:
  /pets:
    get:
      operationId: listPets
      summary: List all pets
      description: Returns a list of all pets in the store
      tags:
        - pets
      parameters:
        - name: limit
          in: query
          description: Maximum number of pets to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: tag
          in: query
          description: Filter pets by tag
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A list of pets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      operationId: createPet
      summary: Create a new pet
      description: Creates a new pet in the store
      tags:
        - pets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPet'
      responses:
        '201':
          description: Pet created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /pets/{petId}:
    get:
      operationId: getPet
      summary: Get pet by ID
      description: Returns a single pet by its ID
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: ID of the pet to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Pet details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      operationId: updatePet
      summary: Update pet
      description: Updates an existing pet
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: ID of the pet to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
      responses:
        '200':
          description: Pet updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      operationId: deletePet
      summary: Delete pet
      description: Deletes a pet from the store
      tags:
        - pets
      parameters:
        - name: petId
          in: path
          description: ID of the pet to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Pet deleted successfully
        '404':
          description: Pet not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Pet:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the pet
          example: 123
        name:
          type: string
          description: Name of the pet
          example: "Fluffy"
        tag:
          type: string
          description: Tag associated with the pet
          example: "cat"
        status:
          type: string
          enum:
            - available
            - pending
            - sold
          description: Pet status in the store
          example: "available"
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          items:
            type: string
          description: URLs of pet photos
        
    NewPet:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the pet
          example: "Fluffy"
        tag:
          type: string
          description: Tag associated with the pet
          example: "cat"
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          items:
            type: string
          description: URLs of pet photos
    
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Category identifier
        name:
          type: string
          description: Category name
          example: "Cats"
    
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message
        details:
          type: string
          description: Additional error details

  securitySchemes:
    ApiKey:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication
    
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token authentication

security:
  - ApiKey: []
  - Bearer: []