"""
E-commerce GraphQL API Schema
Demonstrates a typical GraphQL API with queries, mutations, and subscriptions
"""

scalar DateTime
scalar UUID
scalar Decimal

"""
User account information
"""
type User {
  id: UUID!
  email: String!
  username: String!
  firstName: String
  lastName: String
  avatar: String
  createdAt: DateTime!
  updatedAt: DateTime!
  orders: [Order!]!
  cart: Cart
  addresses: [Address!]!
}

"""
Product catalog item
"""
type Product {
  id: UUID!
  name: String!
  description: String
  price: Decimal!
  currency: String!
  category: Category!
  images: [ProductImage!]!
  inventory: Inventory!
  reviews: [Review!]!
  rating: Float
  tags: [String!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  isActive: Boolean!
}

"""
Product category
"""
type Category {
  id: UUID!
  name: String!
  slug: String!
  description: String
  parent: Category
  children: [Category!]!
  products: [Product!]!
  image: String
}

"""
Product image
"""
type ProductImage {
  id: UUID!
  url: String!
  alt: String
  order: Int!
}

"""
Product inventory information
"""
type Inventory {
  id: UUID!
  productId: UUID!
  quantity: Int!
  reserved: Int!
  available: Int!
  lowStockThreshold: Int!
  isLowStock: Boolean!
}

"""
Customer order
"""
type Order {
  id: UUID!
  orderNumber: String!
  user: User!
  items: [OrderItem!]!
  status: OrderStatus!
  subtotal: Decimal!
  tax: Decimal!
  shipping: Decimal!
  total: Decimal!
  currency: String!
  shippingAddress: Address!
  billingAddress: Address!
  paymentMethod: PaymentMethod!
  createdAt: DateTime!
  updatedAt: DateTime!
  shippedAt: DateTime
  deliveredAt: DateTime
  notes: String
}

"""
Order status enumeration
"""
enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

"""
Order line item
"""
type OrderItem {
  id: UUID!
  product: Product!
  quantity: Int!
  unitPrice: Decimal!
  totalPrice: Decimal!
}

"""
Shopping cart
"""
type Cart {
  id: UUID!
  user: User!
  items: [CartItem!]!
  itemCount: Int!
  subtotal: Decimal!
  currency: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
Shopping cart item
"""
type CartItem {
  id: UUID!
  product: Product!
  quantity: Int!
  addedAt: DateTime!
}

"""
Customer address
"""
type Address {
  id: UUID!
  type: AddressType!
  firstName: String!
  lastName: String!
  company: String
  street1: String!
  street2: String
  city: String!
  state: String!
  postalCode: String!
  country: String!
  phone: String
  isDefault: Boolean!
}

"""
Address type enumeration
"""
enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

"""
Payment method
"""
type PaymentMethod {
  id: UUID!
  type: PaymentType!
  last4: String
  expiryMonth: Int
  expiryYear: Int
  brand: String
  isDefault: Boolean!
}

"""
Payment type enumeration
"""
enum PaymentType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  APPLE_PAY
  GOOGLE_PAY
}

"""
Product review
"""
type Review {
  id: UUID!
  user: User!
  product: Product!
  rating: Int!
  title: String
  comment: String
  isVerifiedPurchase: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  helpfulVotes: Int!
}

"""
Search results
"""
type SearchResult {
  products: [Product!]!
  totalCount: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  filters: SearchFilters!
}

"""
Available search filters
"""
type SearchFilters {
  categories: [Category!]!
  priceRange: PriceRange!
  ratings: [Int!]!
  brands: [String!]!
}

"""
Price range for filtering
"""
type PriceRange {
  min: Decimal!
  max: Decimal!
  currency: String!
}

"""
Input for creating a new user
"""
input CreateUserInput {
  email: String!
  username: String!
  password: String!
  firstName: String
  lastName: String
}

"""
Input for updating user profile
"""
input UpdateUserInput {
  firstName: String
  lastName: String
  avatar: String
}

"""
Input for adding item to cart
"""
input AddToCartInput {
  productId: UUID!
  quantity: Int!
}

"""
Input for updating cart item
"""
input UpdateCartItemInput {
  cartItemId: UUID!
  quantity: Int!
}

"""
Input for creating an order
"""
input CreateOrderInput {
  cartId: UUID!
  shippingAddressId: UUID!
  billingAddressId: UUID!
  paymentMethodId: UUID!
  notes: String
}

"""
Input for creating an address
"""
input CreateAddressInput {
  type: AddressType!
  firstName: String!
  lastName: String!
  company: String
  street1: String!
  street2: String
  city: String!
  state: String!
  postalCode: String!
  country: String!
  phone: String
  isDefault: Boolean = false
}

"""
Input for creating a review
"""
input CreateReviewInput {
  productId: UUID!
  rating: Int!
  title: String
  comment: String
}

"""
Input for searching products
"""
input SearchProductsInput {
  query: String
  categoryId: UUID
  minPrice: Decimal
  maxPrice: Decimal
  minRating: Int
  tags: [String!]
  sortBy: ProductSortBy = RELEVANCE
  sortOrder: SortOrder = DESC
}

"""
Product sorting options
"""
enum ProductSortBy {
  RELEVANCE
  PRICE
  RATING
  CREATED_DATE
  NAME
}

"""
Sort order
"""
enum SortOrder {
  ASC
  DESC
}

"""
Pagination input
"""
input PaginationInput {
  first: Int
  after: String
  last: Int
  before: String
}

"""
Root Query type
"""
type Query {
  """Get current authenticated user"""
  me: User

  """Get user by ID"""
  user(id: UUID!): User

  """Get product by ID"""
  product(id: UUID!): Product

  """Get products with pagination"""
  products(
    pagination: PaginationInput
    categoryId: UUID
    isActive: Boolean = true
  ): [Product!]!

  """Search products"""
  searchProducts(
    input: SearchProductsInput!
    pagination: PaginationInput
  ): SearchResult!

  """Get category by ID"""
  category(id: UUID!): Category

  """Get all categories"""
  categories: [Category!]!

  """Get order by ID"""
  order(id: UUID!): Order

  """Get user's orders"""
  orders(userId: UUID!, pagination: PaginationInput): [Order!]!

  """Get current user's cart"""
  cart: Cart

  """Get user's addresses"""
  addresses: [Address!]!

  """Get product reviews"""
  reviews(
    productId: UUID!
    pagination: PaginationInput
  ): [Review!]!
}

"""
Root Mutation type
"""
type Mutation {
  # User mutations
  """Register a new user"""
  registerUser(input: CreateUserInput!): User!

  """Update user profile"""
  updateUser(input: UpdateUserInput!): User!

  """Delete user account"""
  deleteUser: Boolean!

  # Cart mutations
  """Add item to cart"""
  addToCart(input: AddToCartInput!): Cart!

  """Update cart item quantity"""
  updateCartItem(input: UpdateCartItemInput!): Cart!

  """Remove item from cart"""
  removeFromCart(cartItemId: UUID!): Cart!

  """Clear entire cart"""
  clearCart: Cart!

  # Order mutations
  """Create a new order"""
  createOrder(input: CreateOrderInput!): Order!

  """Cancel an order"""
  cancelOrder(orderId: UUID!): Order!

  """Update order status (admin only)"""
  updateOrderStatus(orderId: UUID!, status: OrderStatus!): Order!

  # Address mutations
  """Create a new address"""
  createAddress(input: CreateAddressInput!): Address!

  """Update an address"""
  updateAddress(id: UUID!, input: CreateAddressInput!): Address!

  """Delete an address"""
  deleteAddress(id: UUID!): Boolean!

  # Review mutations
  """Create a product review"""
  createReview(input: CreateReviewInput!): Review!

  """Update a review"""
  updateReview(id: UUID!, input: CreateReviewInput!): Review!

  """Delete a review"""
  deleteReview(id: UUID!): Boolean!

  """Mark review as helpful"""
  markReviewHelpful(reviewId: UUID!): Review!
}

"""
Root Subscription type
"""
type Subscription {
  """Subscribe to order status updates"""
  orderStatusUpdated(orderId: UUID!): Order!

  """Subscribe to inventory updates for a product"""
  inventoryUpdated(productId: UUID!): Inventory!

  """Subscribe to new reviews for a product"""
  reviewAdded(productId: UUID!): Review!

  """Subscribe to cart updates for current user"""
  cartUpdated: Cart!
}